# Remove built-in rules and variables
# n.b. no-op for make --version < 4.0
MAKEFLAGS += -r
MAKEFLAGS += -R

export RUSTUP_TOOLCHAIN ?= nightly-2017-01-25

TOOLCHAIN ?= arm-none-eabi

SIZE      ?= $(TOOLCHAIN)-size
OBJCOPY   ?= $(TOOLCHAIN)-objcopy
OBJDUMP   ?= $(TOOLCHAIN)-objdump
OBJDUMP_FLAGS += --disassemble-all --source --disassembler-options=force-thumb -C --section-headers

ifndef PLATFORM
$(error Required make vairable PLATFORM is not defined)
endif

ifndef CHIP
$(error Required make variable CHIP is not defined)
endif

ifndef TARGET
TARGET := $(CHIP).json
endif

# If environment variable V is non-empty, be verbose
ifneq ($(V),)
Q=
VERBOSE = --verbose
else
Q=@
VERBOSE =
endif

# Check that rustc is the right nightly - warn not error if wrong, sometimes useful to test others
RUSTC_VERSION_STRING := rustc 1.16.0-nightly (83c2d9523 2017-01-24)
ifneq ($(shell RUSTUP_TOOLCHAIN=$(RUSTUP_TOOLCHAIN) rustc --version), $(RUSTC_VERSION_STRING))
  DUMMY := $(shell rustup install $(RUSTUP_TOOLCHAIN))
  ifneq ($(shell RUSTUP_TOOLCHAIN=$(RUSTUP_TOOLCHAIN) rustc --version), $(RUSTC_VERSION_STRING))
    $(warning You do not have the correct version of `rustc` configured, and `rustup` is not installed.)
    $(warning Expected `rustc` version "$(RUSTC_VERSION_STRING)" but got "$(shell rustc --version)")
    $(warning You may experience unexpected compilation warnings or errors)
    $(warning To fix, install `rustup` from https://rustup.rs/, then run: `rustup install $(RUSTUP_TOOLCHAIN)`)
  endif
endif

.PHONY: all
all:	target/$(CHIP)/release/$(PLATFORM).bin

.PHONY: debug
debug:	target/$(CHIP)/debug/$(PLATFORM).bin

.PHONY: doc
doc:
	$(Q)cargo doc $(VERBOSE) --release --target=$(TARGET)

target/$(CHIP)/release/$(PLATFORM).elf: target/$(CHIP)/release/$(PLATFORM)
	$(Q)cp target/$(CHIP)/release/$(PLATFORM) target/$(CHIP)/release/$(PLATFORM).elf

.PHONY: target/$(CHIP)/release/$(PLATFORM)
target/$(CHIP)/release/$(PLATFORM):
	$(Q)cargo build $(VERBOSE) --release --target=$(TARGET)
	$(Q)$(SIZE) $@

target/$(CHIP)/debug/$(PLATFORM).elf: target/$(CHIP)/debug/$(PLATFORM)
	$(Q)cp target/$(CHIP)/debug/$(PLATFORM) target/$(CHIP)/debug/$(PLATFORM).elf

.PHONY: target/$(CHIP)/debug/$(PLATFORM)
target/$(CHIP)/debug/$(PLATFORM):
	$(Q)cargo build $(VERBOSE) --target=$(TARGET)
	$(Q)$(OBJDUMP) $(OBJDUMP_FLAGS) $@ > target/$(CHIP)/debug/$(PLATFORM).lst
	$(Q)$(SIZE) $@

target/$(CHIP)/release/$(PLATFORM).hex: target/$(CHIP)/release/$(PLATFORM).elf
	$(Q)$(OBJCOPY) -Oihex $^ $@

target/$(CHIP)/debug/$(PLATFORM).hex: target/$(CHIP)/debug/$(PLATFORM).elf
	$(Q)$(OBJCOPY) -Oihex $^ $@

target/$(CHIP)/release/$(PLATFORM).bin: target/$(CHIP)/release/$(PLATFORM).elf
	$(Q)$(OBJCOPY) -Obinary $^ $@

target/$(CHIP)/debug/$(PLATFORM).bin: target/$(CHIP)/debug/$(PLATFORM).elf
	$(Q)$(OBJCOPY) -Obinary $^ $@

.PHONY: clean
clean::
	$(Q)cargo clean $(VERBOSE)

.PHONY: debug
debug: target/$(CHIP)/debug/$(PLATFORM).elf
